Unit Testing in Go
Why Go makes you actually want to write tests ðŸ’Œ

9 Sept 2015
Tags: go unit testing

Ray Imber
Software Engineer / part time Taun Taun
rayimber@gmail.com

* Unit Testing
- It's like eating your vegetables
- No one enjoys it, but it's good for your health
- Setting up a "Test Harness" is hard
- Go has Testing built into the stdlib! Batteries Included!

* The Basics
- create a file whose name ends Xxx_test.go
	myAwesomeProject_test.go
- import "testing"
- Write functions of the form:

	func TestXxx(*testing.T)

- Run your tests from the command line

	> go test

* Mr. T
The `testing.T` interface to be precise

- `T.Fail()`
- `T.FailNow()`
- `T.Log()`
- `T.Logf()`
- `T.Parallel()`

.link http://golang.org/pkg/testing See the Go Docs on Testing for much more info

* Let's see some code already!
`helloGo.go`

.code helloGo.go

`helloGo_test.go`

.code helloGo_test.go

* Where are my Assertions?
- You don't need 'em!
- They can all be constructed using control structures along with the `T` functions
- Go is not opinionated about testing
- You write tests the way that make sense for you

- If you really want assertions. There are packages available:
.link https://github.com/stretchr/testify

* Are you mocking me?
- How about writing mocks in go?
- You don't need 'em!
- the trouble is, Mock Frameworks creates something extra to learn for anybody who might want to contribute to your project
- Native go code is always better
- If you need to mock something that your code relies on, chances are it is a good candidate for an interface
- Even if youâ€™re relying on an external package that you cannot change, your code can still take an interface that the external types will satisfy

- Again, if you really want it, you got it dude (or dudette)!
.link https://github.com/stretchr/testify

* Testing Pro Tips

- Table Driven Tests

- Put your tests in a different package
- lets you test your external API

- Use Canary tests / Sanity Checks
- A rough test is better than no test!

* Table Driven Tests In Detail
- Go lets you have anonymous structs
- Make an array of structs that represent inputs and expected outputs

.link https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742 Shamelessly stolen from Mat Ryer, the Author of Go Programming Blueprints

* Table Driven Test Example
.code fib_test.go /STARTTEST OMIT/,/ENDTEST OMIT/

* Benchmarking in Go
- Go has benchmarking as well as unit testing built into the std lib
- Why do you care?
- Because we all like our code to be really fast! Or at least have an objective measure of speed.
- The benchmarking facility in Go is widely accepted as a reliable standard for measuring the performance of Go code
- Excellent way of communicating a performance improvement, or a regression, in a reproducible way

* Benchmarking Basics
- Same File as your tests
- Functions of the form:

	func BenchmarkXxx(*testing.B)

- Benchmark functions must contain a loop of this form:

	for i := 0; i < *b.N*; i++ { //code that you are benchmarking }

- The benchmark function must run the target code *b.N* times. During benchmark execution, *b.N* is adjusted until the benchmark function lasts long enough to be timed reliably.

- Run the benchmark by running the `test` cmd with the `-bench` flag *and a regex to match test function names*
- generally use a dot `.` to just run all benchmarks

	> go test -bench .

* Mr. B
`testing.B`
- Everything that the `t` interface has + more!
- `b.N()`
- `b.RunParallel()`
- `b.StopTimer()`
- `b.StartTimer()`
.link http://golang.org/pkg/testing As usual, read the docs! They are awesome.

* Benchmark results
- The results of benchmark look like this:

	BenchmarkXxxx    10000000    282 ns/op

- The benchmark ran 10000000 times, and each loop iteration took 282 nanoseconds.

- There are Some flags you can pass to change how benchmark behaves
- `-benchmem` : Print memory allocation statistics for benchmarks.

- `-benchtime` `t` : Set the minimum benchmark time

.link https://golang.org/cmd/go/#hdr-Description_of_testing_flags see the docs for all the gorey details

* Benchmarking FAQ
- Each benchmark is run for a minimum of 1 second by default.
- `b.N` is increased until the function takes at least the mininum amount of time
- testing package uses a simple average
-  You can increase the minimum benchmark time using the -benchtime flag to produce a more accurate result
- If you do not implement the `b.N` loop, the function will run forever because the minimum time is never reached!

* Benchmarking Pro Tips
- For better or worse, modern CPUs rely heavily on active thermal management which can add noise to benchmark results
- Watch out for Compiler Optimisations!
- Always record the result of the function you are benchmarking to prevent the compiler eliminating the function call.
- Always store the result to a package level variable so the compiler cannot eliminate the Benchmark itself.

.link http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go See Dave Cheney's blog for much more gorey details

* Benchmark Example
.code fib_test.go /STARTBENCH OMIT/,/ENDBENCH OMIT/